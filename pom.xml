<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <groupId>io.github.crabzilla</groupId>
  <artifactId>crabzilla</artifactId>
  <version>v0.0.8</version>
  <packaging>pom</packaging>

  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <java.version>1.8</java.version>

    <!-- crabzilla core -->
    <kotlin.version>1.3.72</kotlin.version>
    <serialization.version>0.20.0</serialization.version>
    <vertx.version>3.9.0</vertx.version>
    <vertx.jooq.version>5.1.1</vertx.jooq.version>
    <jackson.version>2.10.2</jackson.version>
    <slf4j.version>1.7.25</slf4j.version>

    <!-- tests-->
    <skipTests>false</skipTests>

    <junit.jupiter.version>5.6.2</junit.jupiter.version>
    <junit.platform.version>1.3.2</junit.platform.version>

    <maven-compiler-plugin.version>3.8.1</maven-compiler-plugin.version>
    <maven-surefire-plugin.version>2.22.2</maven-surefire-plugin.version>
    <maven-failsafe-plugin.version>2.22.2</maven-failsafe-plugin.version>
    <kotlin.compiler.incremental>false</kotlin.compiler.incremental>

    <asciidoctor.maven.plugin.version>1.5.5</asciidoctor.maven.plugin.version>
    <asciidoctorj.pdf.version>1.5.0-alpha.15</asciidoctorj.pdf.version>
    <asciidoctorj.version>1.5.5</asciidoctorj.version>

    <maven.jacoco.plugin.version>0.8.5</maven.jacoco.plugin.version>
    <sonar.java.coveragePlugin>jacoco</sonar.java.coveragePlugin>
    <sonar.jacoco.reportPath>${project.build.directory}/coverage-reports/jacoco.exec</sonar.jacoco.reportPath>
    <sonar.jacoco.itReportPath>${project.build.directory}/coverage-reports/jacoco-it.exec</sonar.jacoco.itReportPath>
  </properties>

  <name>Crabzilla</name>
  <description>Yet another Event Sourcing experiment</description>
  <url>https://github.com/crabzilla/crabzilla</url>

  <developers>
    <developer>
      <name>Rodolfo de Paula</name>
      <email>rodolfo.dpk@gmail.com</email>
      <url>https://github.com/crabzilla/crabzilla</url>
    </developer>
  </developers>

  <scm>
    <connection>scm:git:git://github.com/crabzilla/crabzilla.git</connection>
    <developerConnection>scm:git:git://github.com/crabzilla/crabzilla.git</developerConnection>
    <url>https://github.com/crabzilla/crabzilla</url>
    <tag>crabzilla-0.0.5</tag>
  </scm>

  <distributionManagement>
    <snapshotRepository>
      <id>ossrh</id>
      <url>https://oss.sonatype.org/content/repositories/snapshots</url>
    </snapshotRepository>
    <repository>
      <id>ossrh</id>
      <url>https://oss.sonatype.org/service/local/staging/deploy/maven2/</url>
    </repository>
  </distributionManagement>

  <modules>
    <module>crabzilla-core</module>
    <module>crabzilla-pg-client</module>
    <module>crabzilla-pg-client-jooq</module>
    <module>crabzilla-pg-client-web</module>
    <module>coverage-report</module>
  </modules>

  <dependencyManagement>

    <dependencies>

      <!-- own -->

      <dependency>
        <groupId>io.github.crabzilla</groupId>
        <artifactId>crabzilla-core</artifactId>
        <version>${project.version}</version>
      </dependency>

      <dependency>
        <groupId>io.github.crabzilla</groupId>
        <artifactId>crabzilla-pg-client</artifactId>
        <version>${project.version}</version>
      </dependency>

      <dependency>
        <groupId>io.github.crabzilla</groupId>
        <artifactId>crabzilla-pg-client-jooq</artifactId>
        <version>${project.version}</version>
      </dependency>

      <dependency>
        <groupId>io.github.crabzilla</groupId>
        <artifactId>crabzilla-pg-client-web</artifactId>
        <version>${project.version}</version>
      </dependency>

      <!-- vertx -->

      <dependency>
        <groupId>io.vertx</groupId>
        <artifactId>vertx-stack-depchain</artifactId>
        <version>${vertx.version}</version>
        <type>pom</type>
        <scope>import</scope>
      </dependency>

      <!-- vertx-jooq -->

      <dependency>
        <groupId>io.github.jklingsporn</groupId>
        <artifactId>vertx-jooq-classic-reactive</artifactId>
        <version>5.1.1</version>
      </dependency>

      <!-- util -->

      <dependency>
        <groupId>javax.inject</groupId>
        <artifactId>javax.inject</artifactId>
        <version>1</version>
      </dependency>

      <dependency>
        <groupId>org.jetbrains.kotlinx</groupId>
        <artifactId>kotlinx-serialization-runtime</artifactId>
        <version>${serialization.version}</version>
      </dependency>

      <!-- json -->
      <dependency>
        <groupId>com.fasterxml.jackson.datatype</groupId>
        <artifactId>jackson-datatype-jdk8</artifactId>
        <version>${jackson.version}</version>
      </dependency>
      <dependency>
        <groupId>com.fasterxml.jackson.core</groupId>
        <artifactId>jackson-annotations</artifactId>
        <version>${jackson.version}</version>
      </dependency>
      <dependency>
        <groupId>com.fasterxml.jackson.datatype</groupId>
        <artifactId>jackson-datatype-jsr310</artifactId>
        <version>${jackson.version}</version>
      </dependency>

      <!-- test -->

      <dependency>
        <groupId>org.junit</groupId>
        <artifactId>junit-bom</artifactId>
        <version>${junit.jupiter.version}</version>
        <type>pom</type>
        <scope>test</scope>
      </dependency>

      <dependency>
        <groupId>io.github.crabzilla</groupId>
        <artifactId>crabzilla-core</artifactId>
        <version>${project.version}</version>
        <type>test-jar</type>
      </dependency>

      <dependency>
        <groupId>org.mockito</groupId>
        <artifactId>mockito-core</artifactId>
        <version>2.13.0</version>
        <scope>test</scope>
      </dependency>

      <dependency>
        <groupId>org.assertj</groupId>
        <artifactId>assertj-core</artifactId>
        <version>3.8.0</version>
        <scope>test</scope>
      </dependency>

    </dependencies>
  </dependencyManagement>

  <dependencies>

    <dependency>
      <groupId>javax.inject</groupId>
      <artifactId>javax.inject</artifactId>
    </dependency>

    <dependency>
      <groupId>org.slf4j</groupId>
      <artifactId>slf4j-api</artifactId>
      <version>${slf4j.version}</version>
    </dependency>

    <dependency>
      <groupId>io.vertx</groupId>
      <artifactId>vertx-core</artifactId>
    </dependency>

    <dependency>
      <groupId>io.vertx</groupId>
      <artifactId>vertx-lang-kotlin</artifactId>
    </dependency>

    <dependency>
      <groupId>org.jetbrains.kotlinx</groupId>
      <artifactId>kotlinx-serialization-runtime</artifactId>
    </dependency>

    <!-- test -->

    <dependency>
      <groupId>io.vertx</groupId>
      <artifactId>vertx-junit5</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>io.vertx</groupId>
      <artifactId>vertx-junit5-web-client</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.junit.jupiter</groupId>
      <artifactId>junit-jupiter-api</artifactId>
      <version>${junit.jupiter.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.junit.jupiter</groupId>
      <artifactId>junit-jupiter-engine</artifactId>
      <version>${junit.jupiter.version}</version>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>org.mockito</groupId>
      <artifactId>mockito-core</artifactId>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>org.assertj</groupId>
      <artifactId>assertj-core</artifactId>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>ch.qos.logback</groupId>
      <artifactId>logback-classic</artifactId>
      <version>1.2.3</version>
      <scope>test</scope>
    </dependency>

  </dependencies>

  <build>

    <sourceDirectory>src/main/java</sourceDirectory>
    <testSourceDirectory>src/test/java</testSourceDirectory>

    <plugins>

      <plugin>
        <artifactId>kotlin-maven-plugin</artifactId>
        <groupId>org.jetbrains.kotlin</groupId>
        <version>${kotlin.version}</version>
        <configuration>
          <jvmTarget>1.8</jvmTarget>
          <compilerPlugins>
            <plugin>kotlinx-serialization</plugin>
          </compilerPlugins>
        </configuration>
        <dependencies>
          <dependency>
            <groupId>org.jetbrains.kotlin</groupId>
            <artifactId>kotlin-maven-serialization</artifactId>
            <version>${kotlin.version}</version>
          </dependency>
        </dependencies>
        <executions>
          <execution>
            <id>kapt</id>
            <goals>
              <goal>kapt</goal>
            </goals>
            <configuration>
              <sourceDirs>
                <sourceDir>src/main/java</sourceDir>
              </sourceDirs>
            </configuration>
          </execution>
          <execution>
            <id>compile</id>
            <phase>compile</phase>
            <goals>
              <goal>compile</goal>
            </goals>
          </execution>
          <execution>
            <id>test-kapt</id>
            <goals>
              <goal>test-kapt</goal>
            </goals>
            <configuration>
              <sourceDirs>
                <sourceDir>src/test/java</sourceDir>
              </sourceDirs>
            </configuration>
          </execution>
          <execution>
            <id>test-compile</id>
            <phase>test-compile</phase>
            <goals>
              <goal>test-compile</goal>
            </goals>
          </execution>
        </executions>
      </plugin>

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-compiler-plugin</artifactId>
        <version>${maven-compiler-plugin.version}</version>
        <configuration>
          <proc>none</proc>
          <source>1.8</source>
          <target>1.8</target>
          <annotationProcessors>
            <annotationProcessor>io.vertx.serviceproxy.ServiceProxyProcessor</annotationProcessor>
          </annotationProcessors>
        </configuration>
        <executions>
          <!-- Replacing default-compile as it is treated specially by maven -->
          <execution>
            <id>default-compile</id>
            <phase>none</phase>
          </execution>
          <!-- Replacing default-testCompile as it is treated specially by maven -->
          <execution>
            <id>default-testCompile</id>
            <phase>none</phase>
          </execution>
          <execution>
            <id>java-compile</id>
            <phase>compile</phase>
            <goals>
              <goal>compile</goal>
            </goals>
          </execution>
          <execution>
            <id>java-test-compile</id>
            <phase>test-compile</phase>
            <goals>
              <goal>testCompile</goal>
            </goals>
          </execution>
        </executions>
      </plugin>

      <plugin>
        <artifactId>maven-surefire-plugin</artifactId>
        <version>${maven-surefire-plugin.version}</version>
        <configuration>
          <!-- Sets the VM argument line used when unit tests are run. -->
          <!--  <argLine>${surefireArgLine}</argLine>-->
          <!-- Skips unit tests if the value of skip.unit.tests property is true -->
          <skipTests>${skipTests}</skipTests>
          <!-- Excludes integration tests when unit tests are run. -->
          <excludes>
            <exclude>**/IT*.java</exclude>
          </excludes>
          <includes>
            <include>**/Test*.java</include>
            <include>**/*Test.java</include>
            <include>**/*Tests.java</include>
            <include>**/*TestCase.java</include>
          </includes>
          <properties>
            <!-- <includeTags>fast</includeTags> -->
            <excludeTags>slow</excludeTags>
            <!--
                        <configurationParameters>
                            junit.jupiter.conditions.deactivate = *
                        </configurationParameters>
                        -->
          </properties>
        </configuration>
      </plugin>

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-failsafe-plugin</artifactId>
        <version>${maven-failsafe-plugin.version}</version>
        <executions>
          <!--
                        Ensures that both integration-test and verify goals of the Failsafe Maven
                        plugin are executed.
                    -->
          <execution>
            <id>integration-tests</id>
            <goals>
              <goal>integration-test</goal>
              <goal>verify</goal>
            </goals>
            <configuration>
              <!-- Sets the VM argument line used when integration tests are run. -->
              <!--  <argLine>${failsafeArgLine}</argLine>-->
              <!--
                                Skips integration tests if the value of skip.integration.tests property
                                is true
                            -->
              <skipTests>${skipTests}</skipTests>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <plugin>
        <groupId>org.jetbrains.dokka</groupId>
        <artifactId>dokka-maven-plugin</artifactId>
        <version>0.9.15</version>
        <executions>
          <execution>
            <phase>pre-site</phase>
            <goals>
              <goal>dokka</goal>
            </goals>
          </execution>
        </executions>
      </plugin>

      <plugin>
        <groupId>org.jacoco</groupId>
        <artifactId>jacoco-maven-plugin</artifactId>
        <version>${maven.jacoco.plugin.version}</version>
        <executions>
          <!--
              Prepares the property pointing to the JaCoCo runtime agent which
              is passed as VM argument when Maven the Surefire plugin is executed.
          -->
          <execution>
            <id>pre-unit-test</id>
            <goals>
              <goal>prepare-agent</goal>
            </goals>
            <configuration>
              <!-- Sets the path to the file which contains the execution data. -->
              <destFile>${jacoco.ut.execution.data.file}</destFile>
              <!--
                  Sets the name of the property containing the settings
                  for JaCoCo runtime agent.
              -->
              <propertyName>surefireArgLine</propertyName>
            </configuration>
          </execution>
          <!--
              Ensures that the code coverage report for unit tests is created after
              unit tests have been run.
          -->
          <execution>
            <id>post-unit-test</id>
            <phase>test</phase>
            <goals>
              <goal>report</goal>
            </goals>
            <configuration>
              <!-- Sets the path to the file which contains the execution data. -->
              <dataFile>${jacoco.ut.execution.data.file}</dataFile>
              <!-- Sets the output directory for the code coverage report. -->
              <outputDirectory>${project.reporting.outputDirectory}/jacoco-ut</outputDirectory>
            </configuration>
          </execution>
          <!--
              Prepares the property pointing to the JaCoCo runtime agent which
              is passed as VM argument when Maven the Failsafe plugin is executed.
          -->
          <execution>
            <id>pre-integration-test</id>
            <phase>pre-integration-test</phase>
            <goals>
              <goal>prepare-agent</goal>
            </goals>
            <configuration>
              <!-- Sets the path to the file which contains the execution data. -->
              <destFile>${jacoco.it.execution.data.file}</destFile>
              <!--
                  Sets the name of the property containing the settings
                  for JaCoCo runtime agent.
              -->
              <propertyName>failsafeArgLine</propertyName>
            </configuration>
          </execution>
          <!--
              Ensures that the code coverage report for integration tests after
              integration tests have been run.
          -->
          <execution>
            <id>post-integration-test</id>
            <phase>post-integration-test</phase>
            <goals>
              <goal>report</goal>
            </goals>
            <configuration>
              <!-- Sets the path to the file which contains the execution data. -->
              <dataFile>${jacoco.it.execution.data.file}</dataFile>
              <!-- Sets the output directory for the code coverage report. -->
              <outputDirectory>${project.reporting.outputDirectory}/jacoco-it</outputDirectory>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <plugin>
        <groupId>com.github.gantsign.maven</groupId>
        <artifactId>ktlint-maven-plugin</artifactId>
        <version>1.4.2</version>
        <executions>
          <execution>
            <id>format-and-check</id>
            <goals>
              <goal>format</goal>
              <goal>check</goal>
            </goals>
          </execution>
        </executions>
      </plugin>

    </plugins>

  </build>

  <profiles>

    <profile>
      <id>release</id>
      <activation>
        <property>
          <name>release</name>
        </property>
      </activation>
      <build>
        <plugins>

          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-gpg-plugin</artifactId>
            <version>1.5</version>
            <executions>
              <execution>
                <id>sign-artifacts</id>
                <phase>verify</phase>
                <goals>
                  <goal>sign</goal>
                </goals>
              </execution>
            </executions>
          </plugin>

          <plugin>
            <groupId>org.sonatype.plugins</groupId>
            <artifactId>nexus-staging-maven-plugin</artifactId>
            <version>1.6.8</version>
            <extensions>true</extensions>
            <configuration>
              <serverId>ossrh</serverId>
              <nexusUrl>https://oss.sonatype.org/</nexusUrl>
              <autoReleaseAfterClose>true</autoReleaseAfterClose>
            </configuration>
          </plugin>

          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-source-plugin</artifactId>
            <version>2.2.1</version>
            <executions>
              <execution>
                <id>attach-sources</id>
                <goals>
                  <goal>jar-no-fork</goal>
                </goals>
              </execution>
            </executions>
          </plugin>

          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-javadoc-plugin</artifactId>
            <version>2.9.1</version>
            <executions>
              <execution>
                <id>attach-javadocs</id>
                <goals>
                  <goal>jar</goal>
                </goals>
              </execution>
            </executions>
          </plugin>

          <!--<plugin>-->
          <!--<groupId>org.apache.maven.plugins</groupId>-->
          <!--<artifactId>maven-release-plugin</artifactId>-->
          <!--<version>2.5.3</version>-->
          <!--<configuration>-->
          <!--<autoVersionSubmodules>true</autoVersionSubmodules>-->
          <!--<useReleaseProfile>false</useReleaseProfile>-->
          <!--<releaseProfiles>release</releaseProfiles>-->
          <!--<goals>deploy</goals>-->
          <!--</configuration>-->
          <!--</plugin>-->

        </plugins>
      </build>
    </profile>

    <profile>
      <id>documents</id>
      <properties>
        <skipTests>true</skipTests>
      </properties>
      <build>
        <plugins>
          <plugin>
            <groupId>org.asciidoctor</groupId>
            <artifactId>asciidoctor-maven-plugin</artifactId>
            <version>${asciidoctor.maven.plugin.version}</version>
            <!--<dependencies>-->
            <!--&lt;!&ndash; Comment this section to use the default jruby artifact provided by the plugin &ndash;&gt;-->
            <!--<dependency>-->
            <!--<groupId>org.jruby</groupId>-->
            <!--<artifactId>jruby-complete</artifactId>-->
            <!--<version>${jruby.version}</version>-->
            <!--</dependency>-->
            <!--&lt;!&ndash; Comment this section to use the default AsciidoctorJ artifact provided by the plugin &ndash;&gt;-->
            <!--<dependency>-->
            <!--<groupId>org.asciidoctor</groupId>-->
            <!--<artifactId>asciidoctorj</artifactId>-->
            <!--<version>${asciidoctorj.version}</version>-->
            <!--</dependency>-->
            <!--</dependencies>-->
            <configuration>
              <sourceDirectory>doc/asciidoc</sourceDirectory>
              <baseDir>${project.basedir}</baseDir>
              <!-- If you set baseDir to ${project.basedir}, top-level includes are resolved relative to the project root -->
              <!--
              <baseDir>${project.basedir}</baseDir>
              -->
              <!-- Attributes common to all output formats -->
              <attributes>
                <endpoint-url>http://example.org</endpoint-url>
                <sourcedir>${project.build.sourceDirectory}</sourcedir>
                <project-version>${project.version}</project-version>
              </attributes>
            </configuration>
            <executions>
              <execution>
                <id>asciidoc-to-html</id>
                <phase>generate-resources</phase>
                <goals>
                  <goal>process-asciidoc</goal>
                </goals>
                <configuration>
                  <backend>html5</backend>
                  <sourceHighlighter>highlightjs</sourceHighlighter>
                  <!--
                  Scenarios for linking vs embedding assets:

                  Link to both stylesheets and images::

                     - don't set embedAssets option
                     - set linkcss attribute to true
                     - set imagesdir attribute to path relative to AsciiDoc source file

                    <attributes>
                        <linkcss>true</linkcss>
                        <imagesdir>./images</imagesdir>
                    </attributes>

                  Embed stylesheets and images::

                     - set embedAssets option to true
                     - don't set linkcss attribute
                     - set imagesdir attribute to path relative to project root

                    <embedAssets>true</embedAssets>
                    <attributes>
                        <imagesdir>src/docs/asciidoc/images</imagesdir>
                    </attributes>

                  Link to stylesheets but embed images::

                     - set embedAssets option to true
                     - set linkcss attribute to true
                     - set imagesdir attribute to path relative to project root

                    <embedAssets>true</embedAssets>
                    <attributes>
                        <linkcss>true</linkcss>
                        <imagesdir>src/docs/asciidoc/images</imagesdir>
                    </attributes>

                  Embed stylesheets but link images (default)::

                     - don't set embedAssets option
                     - don't set linkcss attribute
                     - set imagesdir attribute to path relative to AsciiDoc source file

                    <attributes>
                        <imagesdir>./images</imagesdir>
                    </attributes>

                  IMPORTANT: When you enable image embedding, you must qualify the path the the imagesdir, as shown above.
                  -->
                  <attributes>
                    <imagesdir>./images</imagesdir>
                    <toc>left</toc>
                    <icons>font</icons>
                    <sectanchors>true</sectanchors>
                    <!-- set the idprefix to blank -->
                    <idprefix/>
                    <idseparator>-</idseparator>
                    <docinfo1>true</docinfo1>
                  </attributes>
                </configuration>
              </execution>
            </executions>
          </plugin>

          <plugin>
            <artifactId>maven-resources-plugin</artifactId>
            <groupId>org.apache.maven.plugins</groupId>
            <version>3.0.2</version>
            <executions>
              <execution>
                <id>copy-resources</id>
                <!-- here the phase you need -->
                <!--<phase>validate</phase>-->
                <phase>generate-resources</phase>

                <goals>
                  <goal>copy-resources</goal>
                </goals>
                <configuration>
                  <encoding>${project.build.sourceEncoding}</encoding>
                  <outputDirectory>${basedir}/docs</outputDirectory>
                  <resources>
                    <resource>
                      <directory>${basedir}/target/generated-docs</directory>
                      <!--<filtering>true</filtering>-->
                    </resource>
                  </resources>
                </configuration>
              </execution>
            </executions>
          </plugin>

        </plugins>
      </build>
    </profile>

  </profiles>

</project>
