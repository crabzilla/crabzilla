<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
     xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
     xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <groupId>io.github.crabzilla</groupId>
  <artifactId>accounts</artifactId>
  <version>v0.4.0</version>
  <packaging>pom</packaging>

  <modules>
    <module>accounts-domain</module>
    <module>accounts-api</module>
    <module>accounts-integration</module>
  </modules>

  <properties>
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>

    <kotlin.version>1.6.10</kotlin.version>
    <serialization.version>1.3.1</serialization.version>
    <vertx.version>4.2.3</vertx.version>
    <crabzilla.version>${project.version}</crabzilla.version>

    <maven-shade-plugin.version>3.2.4</maven-shade-plugin.version>
    <maven-surefire-plugin.version>2.22.2</maven-surefire-plugin.version>
    <exec-maven-plugin.version>3.0.0</exec-maven-plugin.version>

    <junit-jupiter.version>5.7.0</junit-jupiter.version>

    <main.verticle>io.github.crabzilla.accounts.MainVerticle</main.verticle>
    <launcher.class>io.vertx.core.Launcher</launcher.class>

    <asciidoctor.maven.plugin.version>2.2.1</asciidoctor.maven.plugin.version>
    <asciidoctorj.pdf.version>1.5.4</asciidoctorj.pdf.version>
    <asciidoctorj.version>2.2.1</asciidoctorj.version>

  </properties>

  <repositories>
    <repository>
      <id>central</id>
      <url>https://repo.maven.apache.org/maven2</url>
    </repository>
    <repository>
      <id>jitpack.io</id>
      <url>https://jitpack.io</url>
    </repository>
  </repositories>

  <dependencyManagement>
    <dependencies>
      <dependency>
        <groupId>io.vertx</groupId>
        <artifactId>vertx-stack-depchain</artifactId>
        <version>${vertx.version}</version>
        <type>pom</type>
        <scope>import</scope>
      </dependency>

      <dependency>
        <groupId>io.github.crabzilla</groupId>
        <artifactId>accounts-domain</artifactId>
        <version>${project.version}</version>
      </dependency>

      <!-- crabzilla -->
      <dependency>
        <groupId>io.github.crabzilla.crabzilla</groupId>
        <artifactId>crabzilla-core</artifactId>
        <version>${crabzilla.version}</version>
      </dependency>

      <dependency>
        <groupId>io.github.crabzilla.crabzilla</groupId>
        <artifactId>crabzilla-kotlinx-json</artifactId>
        <version>${crabzilla.version}</version>
      </dependency>

      <dependency>
        <groupId>io.github.crabzilla.crabzilla</groupId>
        <artifactId>crabzilla-vertx-pgclient</artifactId>
        <version>${crabzilla.version}</version>
      </dependency>

    </dependencies>

  </dependencyManagement>

  <dependencies>

    <!-- crabzilla -->
    <dependency>
      <groupId>io.github.crabzilla.crabzilla</groupId>
      <artifactId>crabzilla-core</artifactId>
    </dependency>

    <dependency>
      <groupId>io.github.crabzilla.crabzilla</groupId>
      <artifactId>crabzilla-kotlinx-json</artifactId>
    </dependency>

    <!-- kotlin -->
    <dependency>
      <groupId>org.jetbrains.kotlin</groupId>
      <artifactId>kotlin-stdlib</artifactId>
      <version>${kotlin.version}</version>
    </dependency>

    <dependency>
      <groupId>org.jetbrains.kotlinx</groupId>
      <artifactId>kotlinx-serialization-json</artifactId>
      <version>${serialization.version}</version>
    </dependency>

    <!-- to improve UUID storage within postgres -->
    <!--    <dependency>-->
    <!--      <groupId>com.github.f4b6a3</groupId>-->
    <!--      <artifactId>uuid-creator</artifactId>-->
    <!--      <version>4.1.2</version>-->
    <!--    </dependency>-->

    <!-- web -->
<!--    <dependency>-->
<!--      <groupId>io.vertx</groupId>-->
<!--      <artifactId>vertx-web</artifactId>-->
<!--    </dependency>-->

    <!-- test -->
    <dependency>
      <groupId>io.vertx</groupId>
      <artifactId>vertx-junit5</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.junit.jupiter</groupId>
      <artifactId>junit-jupiter-api</artifactId>
      <version>${junit-jupiter.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.junit.jupiter</groupId>
      <artifactId>junit-jupiter-engine</artifactId>
      <version>${junit-jupiter.version}</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>io.kotest</groupId>
      <artifactId>kotest-assertions-core-jvm</artifactId>
      <version>5.0.0</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>io.kotest</groupId>
      <artifactId>kotest-runner-junit5-jvm</artifactId>
      <version>5.0.0</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>com.tngtech.archunit</groupId>
      <artifactId>archunit</artifactId>
      <version>0.22.0</version>
      <scope>test</scope>
    </dependency>

  </dependencies>

  <build>
      <sourceDirectory>${project.basedir}/src/main/kotlin</sourceDirectory>
      <testSourceDirectory>${project.basedir}/src/test/kotlin</testSourceDirectory>
    <plugins>
      <plugin>
        <groupId>org.jetbrains.kotlin</groupId>
        <artifactId>kotlin-maven-plugin</artifactId>
        <version>${kotlin.version}</version>
        <configuration>
          <jvmTarget>11</jvmTarget>
          <compilerPlugins>
            <plugin>kotlinx-serialization</plugin>
          </compilerPlugins>
        </configuration>
        <dependencies>
          <dependency>
            <groupId>org.jetbrains.kotlin</groupId>
            <artifactId>kotlin-maven-serialization</artifactId>
            <version>${kotlin.version}</version>
          </dependency>
        </dependencies>
        <executions>
          <execution>
            <id>compile</id>
            <goals>
              <goal>compile</goal>
            </goals>
          </execution>
          <execution>
            <id>test-compile</id>
            <goals>
              <goal>test-compile</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
     </plugins>
  </build>

  <profiles>

    <profile>
      <id>documents</id>
      <properties>
        <skipTests>true</skipTests>
      </properties>
      <build>
        <plugins>
          <plugin>
            <groupId>org.asciidoctor</groupId>
            <artifactId>asciidoctor-maven-plugin</artifactId>
            <version>${asciidoctor.maven.plugin.version}</version>
            <!--<dependencies>-->
            <!--&lt;!&ndash; Comment this section to use the default jruby artifact provided by the plugin &ndash;&gt;-->
            <!--<dependency>-->
            <!--<groupId>org.jruby</groupId>-->
            <!--<artifactId>jruby-complete</artifactId>-->
            <!--<version>${jruby.version}</version>-->
            <!--</dependency>-->
            <!--&lt;!&ndash; Comment this section to use the default AsciidoctorJ artifact provided by the plugin &ndash;&gt;-->
            <!--<dependency>-->
            <!--<groupId>org.asciidoctor</groupId>-->
            <!--<artifactId>asciidoctorj</artifactId>-->
            <!--<version>${asciidoctorj.version}</version>-->
            <!--</dependency>-->
            <!--</dependencies>-->
            <configuration>
              <sourceDirectory>doc/asciidoc</sourceDirectory>
              <baseDir>${project.basedir}</baseDir>
              <!-- If you set baseDir to ${project.basedir}, top-level includes are resolved relative to the project root -->
              <!--
              <baseDir>${project.basedir}</baseDir>
              -->
              <!-- Attributes common to all output formats -->
              <attributes>
                <endpoint-url>http://example.org</endpoint-url>
                <sourcedir>${project.build.sourceDirectory}</sourcedir>
                <project-version>${project.version}</project-version>
              </attributes>
            </configuration>
            <executions>
              <execution>
                <id>asciidoc-to-html</id>
                <phase>generate-resources</phase>
                <goals>
                  <goal>process-asciidoc</goal>
                </goals>
                <configuration>
                  <backend>html5</backend>
                  <attributes>

<!--                    <source-highlighter>highlight.js</source-highlighter>-->
                    <sourceHighlighter>highlightjs</sourceHighlighter>
                    <imagesdir>./images</imagesdir>
                    <toc>left</toc>
                    <icons>font</icons>
                    <sectanchors>true</sectanchors>
                    <!-- set the idprefix to blank -->
                    <idprefix/>
                    <idseparator>-</idseparator>
                    <docinfo1>true</docinfo1>
                  </attributes>
                  <!--
                  Scenarios for linking vs embedding assets:

                  Link to both stylesheets and images::

                     - don't set embedAssets option
                     - set linkcss attribute to true
                     - set imagesdir attribute to path relative to AsciiDoc source file

                    <attributes>
                        <linkcss>true</linkcss>
                        <imagesdir>./images</imagesdir>
                    </attributes>

                  Embed stylesheets and images::

                     - set embedAssets option to true
                     - don't set linkcss attribute
                     - set imagesdir attribute to path relative to project root

                    <embedAssets>true</embedAssets>
                    <attributes>
                        <imagesdir>src/docs/asciidoc/images</imagesdir>
                    </attributes>

                  Link to stylesheets but embed images::

                     - set embedAssets option to true
                     - set linkcss attribute to true
                     - set imagesdir attribute to path relative to project root

                    <embedAssets>true</embedAssets>
                    <attributes>
                        <linkcss>true</linkcss>
                        <imagesdir>src/docs/asciidoc/images</imagesdir>
                    </attributes>

                  Embed stylesheets but link images (default)::

                     - don't set embedAssets option
                     - don't set linkcss attribute
                     - set imagesdir attribute to path relative to AsciiDoc source file

                    <attributes>
                        <imagesdir>./images</imagesdir>
                    </attributes>

                  IMPORTANT: When you enable image embedding, you must qualify the path the the imagesdir, as shown above.
                  -->
                </configuration>
              </execution>
            </executions>
          </plugin>

          <plugin>
            <artifactId>maven-resources-plugin</artifactId>
            <groupId>org.apache.maven.plugins</groupId>
            <version>3.0.2</version>
            <executions>
              <execution>
                <id>copy-resources</id>
                <!-- here the phase you need -->
                <!--<phase>validate</phase>-->
                <phase>generate-resources</phase>

                <goals>
                  <goal>copy-resources</goal>
                </goals>
                <configuration>
                  <encoding>${project.build.sourceEncoding}</encoding>
                  <outputDirectory>${basedir}/docs</outputDirectory>
                  <resources>
                    <resource>
                      <directory>${basedir}/target/generated-docs</directory>
                      <!--<filtering>true</filtering>-->
                    </resource>
                  </resources>
                </configuration>
              </execution>
            </executions>
          </plugin>

        </plugins>
      </build>
    </profile>

  </profiles>

</project>
