/*
 * This file is generated by jOOQ.
 */
package io.github.crabzilla.hazelcast.query.datamodel.tables;


import io.github.crabzilla.hazelcast.query.datamodel.Keys;
import io.github.crabzilla.hazelcast.query.datamodel.Public;
import io.github.crabzilla.hazelcast.query.datamodel.tables.records.HzProjectionsRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class HzProjections extends TableImpl<HzProjectionsRecord> {

    private static final long serialVersionUID = -1503467634;

    /**
     * The reference instance of <code>public.hz_projections</code>
     */
    public static final HzProjections HZ_PROJECTIONS = new HzProjections();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<HzProjectionsRecord> getRecordType() {
        return HzProjectionsRecord.class;
    }

    /**
     * The column <code>public.hz_projections.entityid</code>.
     */
    public final TableField<HzProjectionsRecord, String> ENTITYID = createField(DSL.name("entityid"), org.jooq.impl.SQLDataType.VARCHAR(36).nullable(false), this, "");

    /**
     * The column <code>public.hz_projections.consumerid</code>.
     */
    public final TableField<HzProjectionsRecord, String> CONSUMERID = createField(DSL.name("consumerid"), org.jooq.impl.SQLDataType.VARCHAR(36).nullable(false), this, "");

    /**
     * The column <code>public.hz_projections.sequence</code>.
     */
    public final TableField<HzProjectionsRecord, Long> SEQUENCE = createField(DSL.name("sequence"), org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * Create a <code>public.hz_projections</code> table reference
     */
    public HzProjections() {
        this(DSL.name("hz_projections"), null);
    }

    /**
     * Create an aliased <code>public.hz_projections</code> table reference
     */
    public HzProjections(String alias) {
        this(DSL.name(alias), HZ_PROJECTIONS);
    }

    /**
     * Create an aliased <code>public.hz_projections</code> table reference
     */
    public HzProjections(Name alias) {
        this(alias, HZ_PROJECTIONS);
    }

    private HzProjections(Name alias, Table<HzProjectionsRecord> aliased) {
        this(alias, aliased, null);
    }

    private HzProjections(Name alias, Table<HzProjectionsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> HzProjections(Table<O> child, ForeignKey<O, HzProjectionsRecord> key) {
        super(child, key, HZ_PROJECTIONS);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public UniqueKey<HzProjectionsRecord> getPrimaryKey() {
        return Keys.HZ_PROJECTIONS_PKEY;
    }

    @Override
    public List<UniqueKey<HzProjectionsRecord>> getKeys() {
        return Arrays.<UniqueKey<HzProjectionsRecord>>asList(Keys.HZ_PROJECTIONS_PKEY);
    }

    @Override
    public HzProjections as(String alias) {
        return new HzProjections(DSL.name(alias), this);
    }

    @Override
    public HzProjections as(Name alias) {
        return new HzProjections(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public HzProjections rename(String name) {
        return new HzProjections(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public HzProjections rename(Name name) {
        return new HzProjections(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<String, String, Long> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
